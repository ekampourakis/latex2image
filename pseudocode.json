{
  "pseudocode": [
    {
      "id": "general_simulation",
      "latex": "\\begin{algorithm}\n\\caption{General Simulation Loop}\n\\begin{algorithmic}[1]\n\\State Initialize parameters, particle grid, and config\n\\For{each step}\n    \\If{(UsePause) and (Converges)} \\Return \\EndIf\n    \\For{each spring} \\State Apply spring force \\EndFor\n    \\If{collision enabled} \\State Call Collision Handling \\EndIf\n    \\For{each particle}\n         \\State Update position via Verlet:\n         \\(\\mathbf{r}(t+\\Delta t)=\\mathbf{r}(t)+(\\mathbf{r}(t)-\\mathbf{r}(t-\\Delta t))\\,D+\\frac{\\mathbf{F}(t)}{m}\\,\\Delta t^2\\)\n    \\EndFor\n    \\For{each constraint iteration}\n         \\For{each constraint}\n              \\If{violated} \\State Adjust positions: \\(\\Delta \\mathbf{r}=(1-\\frac{L_0}{L})\\,C\\,(\\mathbf{r}_1-\\mathbf{r}_2)\\) \\EndIf\n         \\EndFor\n    \\EndFor\n    \\State Update state (e.g., dip, convergence)\n\\EndFor\n\\end{algorithmic}\n\\end{algorithm}",
      "auto_align": true
    },
    {
      "id": "collision_handling",
      "latex": "\\begin{algorithm}\n\\caption{Collision Handling}\n\\begin{algorithmic}[1]\n\\For{each collision shape}\n    \\For{each particle}\n         \\If{particle is active and in bounding volume}\n              \\State Detect collision type\n              \\If{collision detected}\n                  \\State Compute normal \\(\\mathbf{n}\\) and penetration \\(d\\)\n                  \\State Adjust force: \\(\\mathbf{F}_{\\text{collision}}=-k_{\\text{col}}\\,d\\,\\mathbf{n}\\)\n                  \\State Update force: \\(\\mathbf{F}_{\\text{adjusted}}=\\mathbf{F}-(\\mathbf{F}\\cdot\\mathbf{n})\\,\\mathbf{n}\\)\n              \\EndIf\n         \\EndIf\n    \\EndFor\n\\EndFor\n\\end{algorithmic}\n\\end{algorithm}",
      "auto_align": true
    },
    {
      "id": "particle_constraint",
      "latex": "\\begin{algorithm}\n\\caption{Particle Update and Constraint Satisfaction}\n\\begin{algorithmic}[1]\n\\For{each particle}\n    \\If{active and not bitmapped}\n         \\State Save current position \\(\\mathbf{r}_{old}\\)\n         \\State Update position via Verlet\n         \\State Enforce motion speed limits\n         \\State Set previous position \\(\\mathbf{r}(t-\\Delta t)=\\mathbf{r}_{old}\\)\n         \\State Reset force to gravity \\((0,0,-g\\,m)\\)\n    \\EndIf\n\\EndFor\n\\For{each constraint (between particles \\(i,j\\))}\n    \\State Compute \\(\\mathbf{v}=\\mathbf{r}_i-\\mathbf{r}_j\\) and \\(L=\\|\\mathbf{v}\\|\\)\n    \\If{\\(L>\\lambda L_0\\)}\n         \\State \\(\\Delta \\mathbf{r}=(1-\\frac{L_0}{L})\\,C\\,\\mathbf{v}\\)\n         \\State Adjust: \\(\\mathbf{r}_i-=\\Delta \\mathbf{r},\\; \\mathbf{r}_j+=\\Delta \\mathbf{r}\\)\n    \\EndIf\n\\EndFor\n\\end{algorithmic}\n\\end{algorithm}",
      "auto_align": true
    },
    {
      "id": "gpu_cpu_communication",
      "latex": "\\begin{algorithm}\n\\caption{CPU-GPU Communication}\n\\begin{algorithmic}[1]\n\\State ToGPU(data)\n\\State LaunchKernel(CUDASpring, data)\n\\If{collision enabled} \\State LaunchKernel(CUDACollide, data) \\EndIf\n\\State LaunchKernel(CUDAVerlet, data)\n\\For{each constraint iter}\n    \\State LaunchKernel(CUDAConstraint, data)\n\\EndFor\n\\State FromGPU(particles)\n\\end{algorithmic}\n\\end{algorithm}",
      "auto_align": true
    },
    {
      "id": "cuda_kernel",
      "latex": "\\begin{algorithm}\n\\caption{CUDA Kernel (Simplified)}\n\\begin{algorithmic}[1]\n\\For{each thread index $idx$ in parallel}\n    \\If{$idx < $ numParticles}\n         \\State Compute net force: \\(\\mathbf{F}(idx)=\\mathbf{F}_{spring}+\\mathbf{F}_{gravity}+\\mathbf{F}_{collision}\\)\n         \\State Update position via Verlet\n         \\State Apply local collision correction\n    \\EndIf\n\\EndFor\n\\end{algorithmic}\n\\end{algorithm}",
      "auto_align": true
    }
  ]
}